import type { NextApiRequest, NextApiResponse } from 'next'
import { prisma } from '@/lib/prisma'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST'])
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { specificationId } = req.body

    if (!specificationId) {
      return res.status(400).json({ error: 'Specification ID is required' })
    }

    // Get specification from database
    const specification = await prisma.specification.findUnique({
      where: { id: specificationId }
    })

    if (!specification) {
      return res.status(404).json({ error: 'Specification not found' })
    }

    // For now, return a simple text version
    // In production, you would use a PDF library like jsPDF or Puppeteer
    const content = generateTextContent(specification)

    // Log the export
    await prisma.specificationExport.create({
      data: {
        format: 'pdf',
        filename: `${specification.title.replace(/[^a-z0-9]/gi, '_')}.pdf`,
        fileSize: content.length,
        specificationId: specification.id
      }
    })

    res.setHeader('Content-Type', 'application/pdf')
    res.setHeader('Content-Disposition', `attachment; filename="${specification.title.replace(/[^a-z0-9]/gi, '_')}.pdf"`)
    res.status(200).send(content)

  } catch (error) {
    console.error('Error exporting PDF:', error)
    res.status(500).json({ error: 'Failed to export PDF' })
  }
}

function generateTextContent(specification: any): string {
  const formData = specification.formData
  const content = specification.content

  return `
PROCUREMENT SPECIFICATION
${formData.projectTitle}

Generated: ${new Date(specification.createdAt).toLocaleDateString()}
Department: ${formData.department}
Category: ${formData.category}
Budget Range: ${formData.budgetRange}
Timeline: ${formData.timeline}
Contact: ${formData.contactPerson}

EXECUTIVE SUMMARY
${content.executiveSummary}

PROJECT SCOPE
${content.scope}

REQUIREMENTS
${content.requirements}

TECHNICAL SPECIFICATIONS
${content.technicalSpecs}

COMPLIANCE & STANDARDS
${content.compliance}

EVALUATION CRITERIA
${content.evaluation}

TIMELINE & MILESTONES
${content.timeline}

BUDGET CONSIDERATIONS
${content.budget}

---
Generated by Tribus Advisory AI Specification Generator
Specification ID: ${specification.id}
Version: ${specification.version}
  `
}