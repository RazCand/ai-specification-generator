import type { NextApiRequest, NextApiResponse } from 'next'
import { prisma } from '@/lib/prisma'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST'])
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { specificationId } = req.body

    if (!specificationId) {
      return res.status(400).json({ error: 'Specification ID is required' })
    }

    // Get specification from database
    const specification = await prisma.specification.findUnique({
      where: { id: specificationId }
    })

    if (!specification) {
      return res.status(404).json({ error: 'Specification not found' })
    }

    // Generate Word-compatible content
    const content = generateWordContent(specification)

    // Log the export
    await prisma.specificationExport.create({
      data: {
        format: 'word',
        filename: `${specification.title.replace(/[^a-z0-9]/gi, '_')}.docx`,
        fileSize: content.length,
        specificationId: specification.id
      }
    })

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
    res.setHeader('Content-Disposition', `attachment; filename="${specification.title.replace(/[^a-z0-9]/gi, '_')}.docx"`)
    res.status(200).send(content)

  } catch (error) {
    console.error('Error exporting Word document:', error)
    res.status(500).json({ error: 'Failed to export Word document' })
  }
}

function generateWordContent(specification: any): string {
  const formData = specification.formData
  const content = specification.content

  // For now, return RTF format which Word can open
  // In production, you would use a library like docx to generate proper Word documents
  return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
\\f0\\fs24 PROCUREMENT SPECIFICATION\\par
\\fs20 ${formData.projectTitle}\\par
\\par
Generated: ${new Date(specification.createdAt).toLocaleDateString()}\\par
Department: ${formData.department}\\par
Category: ${formData.category}\\par
\\par
\\fs18\\b EXECUTIVE SUMMARY\\b0\\par
${content.executiveSummary}\\par
\\par
\\fs18\\b PROJECT SCOPE\\b0\\par
${content.scope}\\par
\\par
\\fs18\\b REQUIREMENTS\\b0\\par
${content.requirements}\\par
\\par
\\fs18\\b TECHNICAL SPECIFICATIONS\\b0\\par
${content.technicalSpecs}\\par
\\par
\\fs18\\b COMPLIANCE & STANDARDS\\b0\\par
${content.compliance}\\par
\\par
\\fs18\\b EVALUATION CRITERIA\\b0\\par
${content.evaluation}\\par
\\par
\\fs18\\b TIMELINE & MILESTONES\\b0\\par
${content.timeline}\\par
\\par
\\fs18\\b BUDGET CONSIDERATIONS\\b0\\par
${content.budget}\\par
\\par
Generated by Tribus Advisory AI Specification Generator\\par
}`
}